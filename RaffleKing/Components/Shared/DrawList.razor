@using RaffleKing.Data.Models
@inject IDrawService DrawService

<MudStack AlignItems="AlignItems.Center">
    <MudText Typo="Typo.h1">@_headingPrefix <span style="color: #0bba83">Draws</span></MudText>
    @if (ListType == DrawListType.HostedDraws)
    {
        <MudButton Class="mb-4" Href="/draws/new-draw" Variant="Variant.Filled" Color="Color.Primary">
            Create a New Draw
        </MudButton>
    }
    @if (_draws == null)
    {
        <MudProgressCircular Size="Size.Large" Color="Color.Primary" Indeterminate="true"/>
    }
    else if(_draws.Count == 0)
    {
        <MudText Typo="Typo.h4" Align="Align.Center">No Draws Found</MudText>
    }
    else
    {
        <MudGrid Justify="Justify.Center" Spacing="8">
            @if (_draws.Any(draw => draw is { DrawType: DrawTypeEnum.Raffle, IsActive: false }))
            {
                <MudItem>
                    <MudStack Justify="Justify.Center">
                        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary"><b>RAFFLES</b></MudText>
                        @foreach (var draw in _draws.Where(
                                      draw => draw is { DrawType: DrawTypeEnum.Raffle, IsActive: true }))
                        {
                            <DrawCard Title="@draw.Title" Description="@draw.Description" ListType="@ListType"
                                      DrawDateTime="@draw.DrawDate"/>
                        }
                    </MudStack>
                </MudItem>
            }
            @if (_draws.Any(draw => draw is { DrawType: DrawTypeEnum.Lottery, IsActive: true }))
            {
                <MudItem>
                    <MudStack Justify="Justify.Center">
                        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary"><b>LOTTERIES</b></MudText>
                        @foreach (var draw in _draws.Where(
                                      draw => draw is { DrawType: DrawTypeEnum.Lottery, IsActive: true }))
                        {
                            <DrawCard Title="@draw.Title" Description="@draw.Description" ListType="@ListType"
                                      DrawDateTime="@draw.DrawDate"/>
                        }
                    </MudStack>
                </MudItem>
            }
            @if (_draws.Any(draw => draw is { DrawType: DrawTypeEnum.Raffle, IsActive: false }))
            {
                <MudItem>
                    <MudStack Justify="Justify.Center">
                        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary"><b>INACTIVE RAFFLES</b></MudText>
                        @foreach (var draw in _draws.Where(
                                      draw => draw is { DrawType: DrawTypeEnum.Raffle, IsActive: false }))
                        {
                            <DrawCard Title="@draw.Title" Description="@draw.Description" ListType="@ListType"
                                      DrawDateTime="@draw.DrawDate"/>
                        }
                    </MudStack>
                </MudItem>
            }
            @if (_draws.Any(draw => draw is { DrawType: DrawTypeEnum.Lottery, IsActive: false }))
            {
                <MudItem>
                    <MudStack Justify="Justify.Center">
                        <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Primary"><b>INACTIVE LOTTERIES</b></MudText>
                        @foreach (var draw in _draws.Where(
                                      draw => draw is { DrawType: DrawTypeEnum.Lottery, IsActive: false }))
                        {
                            <DrawCard Title="@draw.Title" Description="@draw.Description" ListType="@ListType"
                                      DrawDateTime="@draw.DrawDate"/>
                        }
                    </MudStack>
                </MudItem>
            }
        </MudGrid>
    }
    <MudDivider DividerType="DividerType.Middle"/>
</MudStack>