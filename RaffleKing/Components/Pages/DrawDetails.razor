@page "/draws/draw-details/{drawId:int}"
@using RaffleKing.Data.Models
@using RaffleKing.Services.DAL.Interfaces
@using RaffleKing.Services.Utilities.Interfaces
@inject IDrawService DrawService
@inject IPrizeService PrizeService
@inject IEntryService EntryService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbarHelper SnackbarHelper

<PageTitle>Draw Details</PageTitle>

<MudStack Justify="Justify.Center" Spacing="6">
    <MudButton OnClick="@(() => NavigationManager.NavigateTo("javascript:history.back()"))"
               StartIcon="@Icons.Material.Filled.ArrowBack">
        Go Back
    </MudButton>
    @switch (_draw)
    {
        case { IsActive: false } when _prizes is { Count: > 0 }:
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center">
                This @_draw.DrawType.ToString() is ready to be published!
            </MudAlert>
            break;
        case {IsActive: false} when _prizes is {Count: 0}:
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" ContentAlignment="HorizontalAlignment.Center">
                This @_draw.DrawType.ToString() cannot be published until at least 1 prize is added!
            </MudAlert>
            break;
    }
    <MudText Typo="Typo.h1" Color="@Color.Tertiary" Align="Align.Center">@_draw?.Title</MudText>
    <MudGrid Justify="Justify.Center" Spacing="0">
        <MudItem>
            <MudContainer MaxWidth="MaxWidth.Small">
                <MudText Typo="Typo.h6" Color="Color.Primary">ABOUT THIS @_draw?.DrawType.ToString().ToUpper()</MudText>
                <MudPaper Class="pa-4 border-t-2 mud-border-primary">
                    <MudText Typo="Typo.body1">@_draw?.Description</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="mt-2">@_detailsText</MudText>
                    @if (_draw?.DrawType == DrawTypeEnum.Lottery)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Tertiary" Class="mt-2">
                            In a Lottery, there is no guarantee of a winner. Any lucky number may be drawn, even if that
                            lucky number has not been selected. In such a case, the prize will not be won by anyone.
                        </MudText>
                    }
                </MudPaper>
            </MudContainer>
        </MudItem>
        <MudItem>
            <MudStack>
                <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">
                        DRAW DETAILS
                    </MudText>
                    <MudPaper Class="pa-4 border-t-2 mud-border-primary">
                        <MudGrid Justify="Justify.Center">
                            <MudItem>
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" Class="mb-2"/>
                                    <MudText Typo="Typo.button" Align="Align.Center" Style="line-height: 1.2">
                                        @_draw?.MaxEntriesPerUser max<br/>per person
                                    </MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem>
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Size="Size.Large" Class="mb-2"/>
                                    <MudText Typo="Typo.button" Align="Align.Center" Style="line-height: 1.2">
                                        Draw date:<br/>@_draw?.DrawDate.ToShortDateString()
                                    </MudText>
                                </MudStack>
                            </MudItem>
                            <MudItem>
                                <MudStack AlignItems="AlignItems.Center" Spacing="0">
                                    <MudIcon Icon="@Icons.Material.Filled.LocalActivity" Size="Size.Large" Class="mb-2"/>
                                    <MudText Typo="Typo.button" Align="Align.Center" Style="line-height: 1.2">
                                        @_draw?.MaxEntriesTotal<br/>total
                                        @(_draw?.DrawType == DrawTypeEnum.Raffle ? "tickets" : "entries")
                                    </MudText>
                                </MudStack>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudContainer>
                <MudContainer MaxWidth="MaxWidth.ExtraSmall">
                    <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">
                        @(_userIsHost ? "DRAW ACTIONS" : "ENTER DRAW")
                    </MudText>
                    <MudPaper Class="pa-4 border-t-2 mud-border-primary">
                        @if (_userIsHost)
                        {
                            @if (_draw is { IsActive: false })
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mb-4"
                                           OnClick="@AddPrize">
                                    Add Prize
                                </MudButton>
                            }
                            @if (_prizes is { Count: > 0 } && _draw is { IsActive: false })
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Info" FullWidth="true" Class="mb-4"
                                           OnClick="@PublishDrawWithConfirmation">
                                    Publish Draw
                                </MudButton>
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true"
                                       OnClick="@DeleteDrawWithConfirmation">
                                Delete Draw
                            </MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.button" Color="Color.Info">@_percentageEntriesRemaining% Total Entries Remaining</MudText>
                            <MudProgressLinear Striped="true" Color="Color.Info" Size="Size.Large" Class="mt-0"
                                               Value="@_percentageEntriesRemaining"/>
                            <MudText Typo="Typo.body1" Color="Color.Primary" Class="mt-2">
                                You have entered this draw @_userEntries?.Count times.
                            </MudText>
                            @if (_availableEntries != 0)
                            {
                                @if (_draw?.DrawType == DrawTypeEnum.Raffle)
                                {
                                    <MudSelect T="int" Label="Entries" Variant="Variant.Filled" Class="mt-4"
                                               AnchorOrigin="Origin.BottomCenter" Immediate="true"
                                               @bind-Value="_selectedNumberOfEntries">
                                            @for (var i = 1; i <= _availableEntries; i++)
                                            {
                                                <MudSelectItem Value="i"/>
                                            }
                                    </MudSelect>
                                }
                                else
                                {
                                    <MudSelect T="int" Label="Lucky Numbers" Variant="Variant.Filled" Value="1" Class="mt-4"
                                               AnchorOrigin="Origin.BottomCenter" Immediate="true" MultiSelection="true">
                                        @if (_availableLuckyNumbers != null)
                                        {
                                            foreach (var luckyNumber in _availableLuckyNumbers)
                                            {
                                                <MudSelectItem Value="luckyNumber"/>
                                            }
                                        }
                                    </MudSelect>
                                }
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-4"
                                           OnClick="@EnterDrawAsUser">
                                    Enter Draw
                                </MudButton>
                            }
                            if (_userEntries is { Count: > 0 })
                            {
                                <MudButton Variant="Variant.Filled" Color="Color.Error" FullWidth="true" Class="mt-4"
                                           OnClick="@RemoveUserEntriesWithConfirmation">
                                    Remove Entries
                                </MudButton>
                            }
                        }
                    </MudPaper>
                </MudContainer>
            </MudStack>
        </MudItem>
    </MudGrid>
    <MudStack Justify="Justify.Center">
        <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">
            AVAILABLE PRIZES
        </MudText>
        <MudGrid Justify="Justify.Center">
            @if (_prizes != null)
            {
                foreach (var prize in _prizes)
                {
                    <MudItem>
                        <MudPaper Class="pa-4 border-t-2 mud-border-primary">
                            <MudText Typo="Typo.h6" Color="Color.Tertiary">@prize.Title</MudText>
                            <MudText Typo="Typo.body1">@prize.Description</MudText>
                            <MudText Typo="Typo.button" Color="Color.Primary">Quantity: @prize.Quantity</MudText>
                            @if (_draw is { IsActive: false })
                            {
                                <MudButton Color="Color.Error" Class="pa-0 ml-2"
                                           OnClick="@(async (e) =>
                                                        await DeletePrizeWithConfirmation(prize.Id))">
                                    Delete Prize
                                </MudButton>
                            }
                        </MudPaper>
                    </MudItem>
                }
            }
            @if (_prizes == null || _prizes.Count == 0)
            {
                <MudText Typo="Typo.h6" Align="Align.Center">
                    This @_draw?.DrawType.ToString() does not have any associated prizes. At least one prize must be
                    added before it can be published.
                </MudText>
            }
        </MudGrid>
    </MudStack>
</MudStack>
